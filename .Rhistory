combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
install.packages("lars")
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
library(readr)
dat <- read_csv("C:/DataScience/1-John Hopkins/Machine learning/Week2/caret/gaData.csv")
View(dat)
library(lubridate) # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
mod_ts <- bats(tstrain)
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testin
testing =concrete[ -inTrain,]
set.seed(325)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
install.packages("svm")
library(e1071)
set.seed(325)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
mod_svm <- train(diagnosis ~ ., data = training, method = "svm")
pred_svm <- predict(mod_svm, testing)
confusionMatrix(pred_svm, testing$diagnosis)$overall
mod_svm <- train(CompressiveStrength ~ ., data = training, method = "svm")
pred_svm <- predict(mod_svm, testing)
confusionMatrix(pred_svm, testing$CompressiveStrength)$overall
mod_svm <- train(CompressiveStrength ~ ., data = training, method = "svm")
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
m
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
Fruits
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
plot(G)
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
print(G2,"chart")
plot(G2)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line,"chart")
plot(Line)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
demo(googleVis)
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~disp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
library(plotly)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp,mode = "markers")
library(shiny)
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
pickXY()
data_frame <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(data_frame)
data_frame <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(data_frame)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=28.3811101, lng=-81.3478240,
popup="Prasath's Office")
my_map
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(readr))
suppressMessages(library(caret))
suppressMessages(library(rpart))
suppressMessages(library(randomForest))
suppressMessages(library(ROCR))
suppressMessages(library(purrr))
suppressMessages(library(tidyr))
training <- suppressWarnings(suppressMessages(read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")))
testing <- suppressWarnings(suppressMessages(read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")))
#display NA counts
training %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
print(n = 15)
#remove columns with more than 19K NAs
columns_with_na <- c(12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,143,144,145,146,147,148,149,150)
training <- training[,-columns_with_na]
#remove first 7 columns, they are IDs,names and timestamps
training <- training[,-c(1:6)]
#insert missing values with Median.
training$magnet_dumbbell_z[is.na(training$magnet_dumbbell_z)] <- median(training$magnet_dumbbell_z, na.rm = T)
training$magnet_forearm_y[is.na(training$magnet_forearm_y)] <- median(training$magnet_forearm_y, na.rm = T)
training$magnet_forearm_z[is.na(training$magnet_forearm_z)] <- median(training$magnet_forearm_z, na.rm = T)
#Validate all columns for NAs
training %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
print(n = 15)
suppressMessages(library(dplyr))
#check for column data type
#sapply(training, function(x) class(x))
#change data type to factor
training$classe <- factor(training$classe)
cols <- colnames(training)
cols <- cols[-54]
testing <- select(testing, one_of(cols))
#split training data into two sets to train and set models
inTrain <- createDataPartition(y=training$classe, p = 0.60, list=FALSE)
mytraining <- training[inTrain,]
mytesting <- training[-inTrain,]
set.seed(123)
tc <- trainControl(method = "cv", number = 3)
modfit_rf <- train(classe ~ ., data = mytraining, method = "rf", trControl = tc)
pred_rf <- predict(modfit_rf, mytesting, type = "class")
set.seed(123)
tc <- trainControl(method = "cv", number = 3)
modfit_rf <- train(classe ~ ., data = mytraining, method = "rf", trControl = tc)
pred_rf <- predict(modfit_rf, mytesting)
confusionMatrix(pred_rf, mytesting$classe)
plot(modfit_rf)
set.seed(123)
modfit_lda <- train(classe ~ ., data = mytraining, method = "lda", trControl = tc)
pred_lda <- predict(modfit_lda, mytesting)
confusionMatrix(pred_lda, mytesting$classe)
plot(modfit_lda)
set.seed(123)
modfit_lda <- train(classe ~ ., data = mytraining, method = "lda", trControl = tc)
pred_lda <- predict(modfit_lda, mytesting)
confusionMatrix(pred_lda, mytesting$classe)
set.seed(123)
modfit_rpart <- train(classe ~ ., data = mytraining, method = "rpart", trControl = tc)
pred_rpart <- predict(modfit_ldarpart, mytesting)
set.seed(123)
modfit_rpart <- train(classe ~ ., data = mytraining, method = "rpart", trControl = tc)
pred_rpart <- predict(modfit_rpart, mytesting)
confusionMatrix(pred_rpart, mytesting$classe)
set.seed(123)
modfit_rpart <- train(classe ~ ., data = mytraining, method = "rpart", trControl = tc)
pred_rpart <- predict(modfit_rpart, mytesting)
confusionMatrix(pred_rpart, mytesting$classe)
plot(modfit_rpart)
fancyRpartPlot(modfit_rpart)
set.seed(123)
modfit_rpart <- train(classe ~ ., data = mytraining, method = "rpart", trControl = tc)
pred_rpart <- predict(modfit_rpart, mytesting)
confusionMatrix(pred_rpart, mytesting$classe)
library(rattle)
fancyRpartPlot(modfit_rpart)
set.seed(123)
modfit_rpart <- train(classe ~ ., data = mytraining, method = "rpart", trControl = tc)
pred_rpart <- predict(modfit_rpart, mytesting)
confusionMatrix(pred_rpart, mytesting$classe)
set.seed(123)
modfit_gbm <- train(classe ~ ., data = mytraining, method = "gbm", trControl = tc)
pred_gbm <- predict(modfit_gbm, mytesting)
confusionMatrix(pred_gbm, mytesting$classe)
plot(modfit_gbm)
#final testing data set
testing <- mutate(testing,classe = predict(combModFit, testings))
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, classe = mytesting$classe)
combModFit <- train(classe ~ ., method = "rf", data = predDF,trControl=tc)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, mytesting$classe)
library(mlbench)
results <- resamples(list(lda=modfit_lda, rf = modfit_rf,gbm=modfit_gbm,combined=combModFit))
# summarize the distributions
summary(results)
# boxplots of results
bwplot(results)
#final testing data set
testing <- mutate(testing,classe = predict(combModFit, testings))
#final testing data set
testing <- mutate(testing,classe = predict(combModFit, testing))
testing <- mutate(testing,classe = predict(modfit_dt, testing, type = "class"))
testing <- mutate(testing,classe = predict(combModFit, testing, type = "class"))
testing <- mutate(testing,classe = predict(combModFit, testing))
predict(combModFit, testing)
testing <- mutate(testing,classe = predict(combModFit, testing))
testing <- mutate(testing,classe = predict(combModFit, testing))
View(testing)
predict(combModFit, testing)
predict(combModFit, testing, type = "prob")
predict(combModFit, testing, type = "prob")
testing <- mutate(testing,classe = predict(combModFit, testing, type = "prob"))
predict(combModFit, testing, type = "prob")
predict(combModFit, testing)
unique(predict(combModFit, testing))
unique(predict(combModFit, testing))
finalpredict <- predict(combModFit, testing))
finalpredict <- predict(combModFit, testing)
finalpredict
finalpredict <- predict(combModFit,newdata = testing)
finalpredict <- predict(combModFit,newdata = testing)
finalpredict
finalpredict <- predict(combModFit,newdata = mytesting)
finalpredict
testing <- suppressWarnings(suppressMessages(read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")))
testing <- select(testing, one_of(cols))
cols <- colnames(training)
testing <- select(testing, one_of(cols))
cols <- cols[-54]
testing <- select(testing, one_of(cols))
one_of(cols)
testing <- select(testing, cols)
cols
as.vector(cols)
testing <- select(testing, cols)
cols
library(dplyr)
testing <- select(testing, cols)
testing <- select(testing, one_of(cols))
select(testing, one_of(cols))
finalpredict <- predict(combModFit,newdata = testing)
predict(combModFit,newdata = mytraining)
training$classe <- factor(training$classe)
library(dplyr)
cols <- colnames(training)
as.vector(cols)
cols <- cols[-54]
testing <- select(testing, one_of(cols))
training$classe <- factor(training$classe)
cols <- colnames(training)
cols <- cols[-54]
testing <- select(testing, one_of(cols))
testing <- training[,-columns_with_na]
testing <- training[,-c(1:6)]
testing <- suppressWarnings(suppressMessages(read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")))
testing <- training[,-columns_with_na]
testing <- testing[,-columns_with_na]
testing <- testing[,-c(1:6)]
testing <- testing[,-c("Classe")]
testing <- testing[,-c(54)]
combModFit <- train(classe ~ ., method = "rf", data = testing,trControl=tc)
testing <- suppressWarnings(suppressMessages(read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")))
testing <- testing[,-columns_with_na]
testing <- testing[,-c(1:6)]
combModFit <- train(classe ~ ., method = "rf", data = testing,trControl=tc)
View(testing)
combPred <- predict(combModFit, testing)
combPred <- predict(combModFit, testing, type = "class")
combPred <- predict(combModFit, testing, type = "prob")
combPred
predict(combModFit, testing)
modFitRandForest <- train(classe ~ ., data=mytraining, method="rf", trControl=tc)
predictTEST <- predict(modFitRandForest, newdata=testing)
predictTEST
predictTEST <- predict(combModFit, newdata=testing)
predictTEST <- predict(modfit_rf, newdata=testing)
predictTEST
testing <- mutate(testing,classe = predict(modfit_rf, testing, type = "prob"))
testing
View(testing)
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~disp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
plot_ly(x = ~precip, type = "histogram")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
library(readxl)
Schools <- read_excel("C:/DataScience/1-John Hopkins/Data product/Assignment2/OrangeCountySchools.xlsx")
View(Schools)
colnames(Schools)
library(plotly)
p <- plot_geo(Schools, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~Long, y = ~Lat, size = ~Schools$`Total Points Earned`, color = ~Schools$`Grade 2016`, hoverinfo = "text",
text = ~paste(Schools$`School Name`, "<br />", Schools$`Total Points Earned`, " Total Earned Points")
) %>%
layout(title = '2016 Florida Orange County School Ratings', geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(Schools, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~Long, y = ~Lat, size = ~Schools$`Total Points Earned`, color = ~Schools$`Grade 2016`, hoverinfo = "text",
text = ~paste(Schools$`School Name`, "<br />", Schools$`Total Points Earned`, " Total Earned Points")
) %>%
layout(title = '2016 Florida Orange County School Ratings', geo = g)
p
florida
g <- list(
scope = 'Florida',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p
library(plotly)
p <- plot_geo(Schools, locationmode = 'Florida', sizes = c(1, 250)) %>%
add_markers(
x = ~Long, y = ~Lat, size = ~Schools$`Total Points Earned`, color = ~Schools$`Grade 2016`, hoverinfo = "text",
text = ~paste(Schools$`School Name`, "<br />", Schools$`Total Points Earned`, " Total Earned Points")
) %>%
layout(title = '2016 Florida Orange County School Ratings', geo = g)
p
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
library(plotly)
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
plot_ly(Schools, y = ~Schools$`Total Points Earned`, color = ~Schools$`School Type`, type = "box")
plot_ly(Schools, y = ~Schools$`Total Points Earned`, color = ~Schools$`School`, type = "box")
plot_ly(Schools, y = ~Schools$`Total Points Earned`, color = ~Schools$`School`, type = "box/jitter")
plot_ly(Schools, y = ~`Total Points Earned`, color = `School`, type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
plot_ly(Schools, y = ~`Total Points Earned`, color = ~`School`, type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "line
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
library(tidyr)
library(dplyr)
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
View(stocks)
library(slidify)
install.packages("slidify")
install.packages("slidify")
library(slidify)
library(slidify)
install.packages("slidify")
library(slidify)
author('SlidifyAssignment2')
require(googleVis)
M1 = gvisMotionChart(Fruits, idvar = 'Fruit', timevar = "Year")
print(M1, tag='chart')
publish('prasathms', 'SlidifyAssignment')
